// COPYRIGHT Dassault Systemes 2024
//===================================================================
//
// CAAFunction.cpp
// Header definition of CAAFunction
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2024  Creation: Code generated by the CAA wizard  root
//===================================================================
#ifndef __CAAFunction
#define __CAAFunction
#endif
#include "CAAFunction.h"

CATDocument *CAAGetDocument(CATISpecObject_var iSpec)
{
    IF_BUG(iSpec == NULL, return NULL);
    CATILinkableObject_var iLinkableObject = iSpec;
    if (iLinkableObject != NULL)
    {
        return iLinkableObject->GetDocument();
    }
    return NULL;
}

CATIContainer *CAAGetContainerOfDoc(CATDocument *pDocument)
{
    CATInit *pInitOnDoc = NULL;
    CATIContainer *pContainer = NULL;
    IF_BUG(pDocument == NULL, return NULL);
    pDocument->QueryInterface(IID_CATInit, (void **)&pInitOnDoc);
    if (pInitOnDoc != NULL)
    {
        pContainer = (CATIContainer *)pInitOnDoc->GetRootContainer("CATIContainer");
        pInitOnDoc->Release();
        pInitOnDoc = NULL;
    }
    return pContainer;
}

CATIPrtContainer *CAAGetPrtContainerOfDoc(CATDocument *pDocument)
{
    CATInit *pInitOnDoc = NULL;
    CATIPrtContainer *pContainer = NULL;
    IF_BUG(pDocument == NULL, return NULL);
    pDocument->QueryInterface(IID_CATInit, (void **)&pInitOnDoc);
    if (pInitOnDoc)
    {
        pContainer = (CATIPrtContainer *)pInitOnDoc->GetRootContainer("CATIPrtContainer");
        pInitOnDoc->Release();
        pInitOnDoc = NULL;
    }
    return pContainer;
}

CATIGSMPointOnCurve_var CAAGSMCreatePointOnCurve(CATIGSMFactory_var iFactory,
    CATISpecObject_var iCurve, CATISpecObject_var iPoint, CATICkeParm_var iDistance,
    CATGSMOrientation iOrientation)
{
    IF_BUG(iFactory == NULL, return NULL_var);
    IF_BUG(iCurve == NULL, return NULL_var);
    return iFactory->CreatePoint(iCurve, iPoint, iDistance, iOrientation);
}

HRESULT CAAGSMInsertInView(CATISpecObject_var iSpec, CATISpecObject_var iFather)
{
    IF_BUG(iSpec == NULL, return E_FAIL);
    CATIGSMProceduralView_var iView = iSpec;
    IF_BUG(iView == NULL, return E_FAIL);
    return iView->InsertInProceduralView(iFather);
}

HRESULT CAATryUpdate(CATISpecObject_var iSpec)
{
    IF_BUG(iSpec == NULL, return E_FAIL);
    CATTry { iSpec->Update(); }
    CATCatch(CATError, e)
    {
        ::std::cerr
            << "ERROR: "
            << CAAGetAlias(iSpec)
            << ": "
            << e->GetNLSMessage()
            << "\n";
    }
    CATEndTry;
    return S_OK;
}

HRESULT CAAGetAlias(CATISpecObject_var iSpec, CATUnicodeString &oName)
{
    IF_BUG(iSpec == NULL, return E_FAIL);
    CATIAlias_var iAlias = iSpec;
    IF_BUG(iAlias == NULL, return E_FAIL);
    oName = iAlias->GetAlias();
    return S_OK;
}

CATUnicodeString CAAGetAlias(CATISpecObject_var iSpec)
{
    IF_BUG(iSpec == NULL, return CATUnicodeString());
    CATIAlias_var iAlias = iSpec;
    IF_BUG(iAlias == NULL, return CATUnicodeString());
    return iAlias->GetAlias();
}

HRESULT CAAGetPointsOfCurve(CATISpecObject_var iSpec, CATMathPoint &ioStartPoint, CATMathPoint &ioEndPoint)
{
    CATMathPoint ioMidPoint;
    return CAAGetPointsOfCurve(iSpec, ioStartPoint, ioMidPoint, ioEndPoint);
}

HRESULT CAAGetPointsOfCurve(CATISpecObject_var iSpec, CATMathPoint &ioStartPoint, CATMathPoint &ioMidPoint, CATMathPoint &ioEndPoint)
{
    CATIMeasurableCurve_var iMeasurableCurve = iSpec;
    IF_BUG(iMeasurableCurve == NULL, return E_FAIL);
    return iMeasurableCurve->GetPoints(ioStartPoint, ioMidPoint, ioEndPoint);
}

HRESULT CAAGetLengthOfCurve(CATISpecObject_var iSpec, double &oLength)
{
    CATIMeasurableCurve_var iMeasurableCurve = iSpec;
    IF_BUG(iMeasurableCurve == NULL, return E_FAIL);
    return iMeasurableCurve->GetLength(oLength);
}

double CAAGetLengthOfCurve(CATISpecObject_var iSpec)
{
    double oLength = -CATMathInfinite;
    CATIMeasurableCurve_var iMeasurableCurve = iSpec;
    IF_BUG(iMeasurableCurve == NULL, return oLength);
    iMeasurableCurve->GetLength(oLength);
    return oLength;
}

CATBoolean CAAIsCurve(CATISpecObject_var iSpec)
{
    IF_BUG(iSpec == NULL, return FALSE);
    return CATIMeasurableCurve_var(iSpec) != NULL;
}

CATBody_var CAASpecToBody(CATISpecObject_var iSpec)
{
    IF_BUG(iSpec == NULL, return NULL_var);
    CATIGeometricalElement_var iGeometricalElement = iSpec;
    IF_BUG(iGeometricalElement == NULL, return NULL_var);
    return iGeometricalElement->GetBodyResult();
}

double CAADistancePointBody(CATTopData *iData, CATMathPoint const &iPoint, CATBody *iBody,
    CATDistanceSignMode iSignMode)
{
    double Distance = -CATdoubleMax;
    CATICGMDistancePointBody *Opr = ::CATCGMCreateDistancePointBody(iBody, iData);
    if (Opr)
    {
        Opr->SetSignMode(iSignMode);
        Opr->SetPoint(iPoint);
        Opr->Run();
        Distance = Opr->GetResultDistance();
        Opr->Release();
    }
    return Distance;
}

double CAADistancePointBody(CATTopData *iData, CATMathPoint const &iPoint, CATBody *iBody,
    CATMathPoint &oPoint, CATDistanceSignMode iSignMode)
{
    double Distance = -CATdoubleMax;
    CATICGMDistancePointBody *Opr = ::CATCGMCreateDistancePointBody(iBody, iData);
    if (Opr)
    {
        Opr->SetSignMode(iSignMode);
        Opr->SetPoint(iPoint);
        Opr->Run();
        Distance = Opr->GetResultDistance();
        Opr->GetResultMathPoint(oPoint);
        Opr->Release();
    }
    return Distance;
}

double CAADistanceBodyBody(CATGeoFactory *iFactory, CATTopData *iData, CATBody *iBody1, CATBody *iBody2)
{
    double Distance = -CATdoubleMax;
    CATICGMDistanceMinBodyBody *Opr = ::CATCGMCreateDistanceMinTopo(iFactory, iData, iBody1, iBody2, ADVANCED);
    if (Opr)
    {
        Opr->Run();
        Distance = Opr->GetDistance();
        Opr->Release();
    }
    return Distance;
}

double CAADistanceBodyBody(CATGeoFactory *iFactory, CATTopData *iData, CATBody *iBody1, CATBody *iBody2, CATMathPoint &oP1, CATMathPoint &oP2)
{
    double Distance = -CATdoubleMax;
    CATICGMDistanceMinBodyBody *Opr = ::CATCGMCreateDistanceMinTopo(iFactory, iData, iBody1, iBody2, ADVANCED);
    if (Opr)
    {
        CATPoint *P1 = NULL, *P2 = NULL;
        Opr->SetPointComputationMode(TRUE);
        Opr->Run();
        Distance = Opr->GetDistance();
        Opr->GetPoints(P1, P2);
        if (P1)
        {
            P1->GetMathPoint(oP1);
            iFactory->Remove(P1);
        }
        if (P2)
        {
            P2->GetMathPoint(oP2);
            iFactory->Remove(P2);
        }
        Opr->Release();
    }
    return Distance;
}

CATBody *CAACreateTopSplitWire(CATGeoFactory *iFactory, CATTopData *iData, CATBody *iBodyToCut, CATBody *iCuttingBody,
    CATHybSelectionMode iSelectMode)
{
    CATBody *Result = NULL;
    CATICGMHybSplit *Opr = ::CATCGMCreateTopNewSplitWire(iFactory, iData, iBodyToCut, iCuttingBody, iSelectMode);
    if (Opr)
    {
        Opr->Run();
        Result = Opr->GetResult();
        Opr->Release();
    }
    return Result;
}

CATBody *CAACreateTopWire3(CATGeoFactory *iFactory, CATTopData *iData,
    CATMathPoint const &P1, CATMathPoint const &P2, CATMathPoint const &P3, CATMathPoint const &P4)
{
    CATBody *Result = NULL;
    CATCurve *Curves[3];
    CATCrvLimits Limits[3];
    short Orientations[3] = {1, 1, 1};
    Curves[0] = (CATCurve *)iFactory->CreateLine(P1, P2);
    Curves[1] = (CATCurve *)iFactory->CreateLine(P2, P3);
    Curves[2] = (CATCurve *)iFactory->CreateLine(P3, P4);
    Curves[0]->GetLimits(Limits[0]);
    Curves[1]->GetLimits(Limits[1]);
    Curves[2]->GetLimits(Limits[2]);
    CATICGMTopWire *Opr = ::CATCGMCreateTopWire(iFactory, iData, 3, Curves, Limits, Orientations);
    if (Opr)
    {
        Opr->Run();
        Result = Opr->GetResult();
        Opr->Release();
    }
    iFactory->Remove(Curves[2]);
    iFactory->Remove(Curves[1]);
    iFactory->Remove(Curves[0]);
    return Result;
}

#include <fstream>

void CAASaveCGM(CATUnicodeString iName, CATBody *iBody)
{
    CATMathTransformation iMathTransfo;
    CATGeoFactory *iFactory = ::CATCreateCGMContainer();

    CATTransfoManager TransfoManager(iMathTransfo, iFactory);
    TransfoManager.Add(iBody);
    TransfoManager.Run();

#ifdef _WINDOWS_SOURCE
    std::ofstream filetowrite(iName.ConvertToChar(), ios::binary);
#else
    std::ofstream ofstream filetowrite(iName.ConvertToChar(), ios::out, filebuf::openprot);
#endif

    ::CATSaveCGMContainer(iFactory, filetowrite);
    filetowrite.close();

    ::CATCloseCGMContainer(iFactory);
}

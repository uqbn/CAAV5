// COPYRIGHT Dassault Systemes 2025
//===================================================================
//
// CAAPluginCmd1.cpp
// The state chart based command: CAAPluginCmd1
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2025  Creation: Code generated by the CAA wizard  root
//===================================================================
#include "CAAPluginCmd1.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass(CAAPluginCmd1);

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CAAPluginCmd1::CAAPluginCmd1()
    : CATStateCommand("CAAPluginCmd1", CATDlgEngOneShot, CATCommandModeExclusive)
    // Valid states are CATDlgEngOneShot and CATDlgEngRepeat
    , _daPathElement(NULL)
    , pSoftConfig(new CATSoftwareConfiguration())
    , TopData(pSoftConfig)
{
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CAAPluginCmd1::~CAAPluginCmd1()
{
    if (_daPathElement != NULL)
        _daPathElement->RequestDelayedDestruction();
    pSoftConfig->Release();
}

//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CAAPluginCmd1::BuildGraph()
{
    _daPathElement = new CATPathElementAgent("Select Object");
    _daPathElement->SetBehavior(CATDlgEngWithPSOHSO |
                                CATDlgEngNewHSOManager);
    CATDialogState *State1 = GetInitialState("Select Object");
    State1->AddDialogAgent(_daPathElement);
    AddTransition(State1, NULL,
        IsOutputSetCondition(_daPathElement),
        Action((ActionMethod)&CAAPluginCmd1::ActionOne));
}

// GeometricObjects
#include "CATTransfoManager.h"

// GMModelInterfaces
#include "CATCGMCheckTopology.h"
#include "ListPOfCATBody.h"

// MecModInterfaces
#include "CATIPrtPart.h"

// VisualizationBase
#include "CATPathElement.h"

#include "CATICGMBodyChecker.h"
#include <CATICGMDynBoolean.h>

#include <CATCGMCreateTopBoundary.h>
#include <CATICGMHybBoundary.h>

#include <CATCGMCreateTopProject.h>
#include <CATICGMHybProject.h>

#include <CATCGMCreateTopologicalFillOp.h>
#include <CATICGMTopologicalFillLight.h>

#include <sstream>

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CAAPluginCmd1::ActionOne(void *data)
{
    CATIPrtPart_var iPart;
    CATISpecObject_var iSpec;
    CATPathElement *pPathElement = _daPathElement->GetValue();
    IF_ERR(pPathElement == NULL, return FALSE);
    for (int n = pPathElement->GetSize(); n--;)
    {
        if (iSpec == NULL)
        {
            iSpec = (*pPathElement)[n];
        }
        if (iPart == NULL)
        {
            iPart = (*pPathElement)[n];
        }
        if (iPart != NULL) { break; }
    }

    CATBody_var iBody = CAAPlugin::GetBodyOnSpec(iSpec);
    IF_ERR(iBody == NULL, return FALSE);

    CATGeoFactory_var GeoFactory = iBody->GetContainer();

    CATBody_var OIJ = CAAPlugin::CreateTopDatum(GeoFactory, &TopData, CATGeoFactory::OIJ);

    CATMathTransformation MathTransfo;
    CATMath3x3Matrix Matrix(1, 1, 0);
    MathTransfo.SetMatrix(Matrix);

    CATBody_var oBody = GeoFactory->CreateBody();
    CATDomain_var oDomain = oBody->CreateDomain(2);
    oBody->AddDomain(oDomain);
    std::stringstream ss;

    CATListPtrCATBody ListBody;
    CATListPtrCATCell ListCell;
    iBody->GetAllCells(ListCell, 2);
    for (int i = 1, i_ = ListCell.Size(); i <= i_; ++i)
    {
        CATCell *Cell = ListCell[i];
        CATTry
        {
            CATTransfoManager TransfoManager(MathTransfo, GeoFactory);
            TransfoManager.Add(Cell);
            TransfoManager.Run();
            Cell = (CATCell *)TransfoManager.ReadImage(Cell);
        }
        CATCatch(CATError, e)
        {
            std::cerr << __LINE__ << ": " << i << "/" << i_ << ": " << e->GetNLSMessage() << std::endl;
            // CATMathPoint Center;
            // ComputeBoxCenter(Cell, Center);
            CATBody_var Body = CAAPlugin::CreateBodyWithCell(GeoFactory, Cell);
            // CATBody_var Plane = CreateTopPlaneWithMath(GeoFactory, &TopData, CATMathPlane(Center, CATMathVector(0, 0, 1)));
            // CATICGMHybSplit *Opr = ::CATCGMCreateTopSplitShellWithKeepRemove(GeoFactory, &TopData, Body, Plane);
            // Opr->Run();
            // CATBody_var Split = Opr->GetResult();
            // Opr->Release();
            // {
            //     CATListPtrCATCell ListCell;
            //     Split->GetAllCells(ListCell, 2);
            //     for (int i = 1, i_ = ListCell.Size(); i <= i_; ++i)
            //     {
            //         CATCell *Cell = ListCell[i];
            //         CATTry
            //         {
            //             CATTransfoManager TransfoManager(MathTransfo, GeoFactory);
            //             TransfoManager.Add(Cell);
            //             TransfoManager.Run();
            //             Cell = (CATCell *)TransfoManager.ReadImage(Cell);
            //         }
            //         CATCatch(CATError, e)
            //         {
            //             std::cerr << __LINE__ << ": " << i << "/" << i_ << ": " << e->GetNLSMessage() << std::endl;
            //         }
            //         CATEndTry;
            //     }
            // }
            // GeoFactory->Remove(Plane, CATICGMContainer::RemoveDependancies);
            // int NbVertices, NbEdges, NbFaces, NbVolumes;
            // Split->GetCellNumbers(&NbVertices, &NbEdges, &NbFaces, &NbVolumes);
            // std::cout << NbVertices << "," << NbEdges << "," << NbFaces << "," << NbVolumes << std::endl;
            CATBody_var Boundary;
            {
                CATICGMHybBoundary *Opr = ::CATCGMCreateTopBoundary(GeoFactory, &TopData, Body);
                Opr->Run();
                Boundary = Opr->GetResult();
                Opr->Release();
            }
            GeoFactory->Remove(Body, CATICGMContainer::RemoveDependancies);
            CATBody_var Project;
            {
                CATICGMHybProject *Opr = ::CATCGMCreateTopProject(GeoFactory, &TopData, Boundary, OIJ);
                Opr->Run();
                Project = Opr->GetResult();
                Opr->Release();
            }
            GeoFactory->Remove(Boundary, CATICGMContainer::RemoveDependancies);
            ss.clear();
            int NumberOfSevereAnomalies = 1;
            CATCGMCheckTopology(Cell, NumberOfSevereAnomalies, ss);
            if (NumberOfSevereAnomalies < 1)
            {
                CATListPtrCATBody ListWire;
                ListWire.Append(Project);
                CATTry
                {
                    std::cout << Project->GetBoundingBox().Volume() << std::endl;
                    CATBody const *Support = NULL;
                    CATICGMTopologicalFill *Opr = ::CATCGMCreateTopologicalFill(GeoFactory, &TopData, 1, (CATBody const **)ListWire.Storage(), &Support);
                    Opr->SetFlatFaceMode();
                    Opr->Run();
                    CATBody_var Fill = Opr->GetResult();
                    Opr->Release();
                    ListBody.Append(Fill);
                }
                CATCatch(CATError, e)
                {
                    CATUnicodeString s;
                    s.BuildFromNum(i);
                    CAAPlugin::SaveCGM(Project, "_" + s);
                    std::cerr << __LINE__ << ": " << i << "/" << i_ << ": " << e->GetNLSMessage() << std::endl;
                    continue;
                }
                CATEndTry;
            }
            GeoFactory->Remove(Project, CATICGMContainer::RemoveDependancies);
            continue;
        }
        CATEndTry;

        int NumberOfSevereAnomalies = 1;
        CATCGMCheckTopology(Cell, NumberOfSevereAnomalies, ss);
        if (NumberOfSevereAnomalies < 1)
        {
            oDomain->AddCell(Cell);
            CATBody *Body = CAAPlugin::CreateBodyWithCell(GeoFactory, Cell);
            CATICGMBodyChecker *Opr = CATICGMBodyChecker::Create(GeoFactory, &TopData, Body);
            Opr->SetCheckMode(CATCGMBodyChkModeFull);
            Opr->Run();
            if (Opr->GetNbDiagnoses() < 1) {}
            else
            {
                CATUnicodeString s;
                s.BuildFromNum(i);
                CAAPlugin::SaveCGM(Body, "_" + s);
            }
            while (Opr->NextDiagnosis())
            {
                CATUnicodeString s;
                Opr->GetDiagnosis(s);
                std::cout << i << ": " << s;
            }
            Opr->Release();
            ListBody.Append(Body);
        }
        ss.str("");

        CAAPlugin::RemoveCGM(GeoFactory, Cell);
    }

    iBody = CAAPlugin::CreateTopDatum(GeoFactory, &TopData, CATGeoFactory::OIJ);
    for (int i = 1, i_ = ListBody.Size(); i <= i_; ++i)
    {
        CATTry
        {
            CATICGMDynBoolean *Opr = ::CATCGMCreateDynBoolean(GeoFactory, &TopData, CATBoolRemoval, iBody, ListBody[i]);
            Opr->Run();
            CATBody_var Boolean = Opr->GetResult();
            Opr->Release();
            CATLONG32 n = Boolean->GetNbDomains();
            if (n > 1)
            {
                double Volume0 = 0;
                CATDomain *Domain0 = NULL;
                for (CATMathBox Box; n > 0; --n)
                {
                    CATDomain *Domain = Boolean->GetDomain(n);
                    Domain->GetBoundingBox(Box);
                    double Volume = Box.Volume();
                    if (Volume0 < Volume)
                    {
                        if (Domain0)
                            Boolean->RemoveDomain(Domain0, true);
                        Domain0 = Domain;
                        Volume0 = Volume;
                    }
                }
            }
            GeoFactory->Remove(ListBody[i], CATICGMContainer::RemoveDependancies);
            GeoFactory->Remove(iBody, CATICGMContainer::RemoveDependancies);
            iBody = Boolean;
        }
        CATCatchOthers {}
        CATEndTry;
    }
    {
        CATICGMDynBoolean *Opr = ::CATCGMCreateDynBoolean(GeoFactory, &TopData, CATBoolRemoval, OIJ, iBody);
        Opr->Run();
        CATBody_var Boolean = Opr->GetResult();
        Opr->Release();
        GeoFactory->Remove(iBody, CATICGMContainer::RemoveDependancies);
        iBody = Boolean;
    }

    // for (int i = 1, i_ = ListBody.Size(); i <= i_; ++i)
    // {
    //     std::cout << i << '\n';
    //     CATBody_var Body = CAAPlugin::CreateSewSkin(GeoFactory, &TopData, OIJ, ListBody[i]);
    //     IF_BUG(Body == NULL, continue);
    //     CAAPlugin::RemoveCGM(GeoFactory, iBody);
    //     iBody = Body;
    // }

    {
        int NbVertices, NbEdges, NbFaces, NbVolumes;
        oBody->GetCellNumbers(&NbVertices, &NbEdges, &NbFaces, &NbVolumes);
        std::cout << NbVertices << "," << NbEdges << "," << NbFaces << "," << NbVolumes << std::endl;
    }

    CAAPlugin::SaveCGM(iBody, "1");
    CAAPlugin::SaveCGM(oBody, "0");

    CAAPlugin::RemoveCGM(GeoFactory, oBody);

    return TRUE;
}
